#     req = str_replace_all(req, " ", "")
#     ws$send(req)
#     pair$hreq <<- TRUE
#
#     if(ncol(prices) == 0){
#       prices <<- data.frame(pair$standardized_close())
#       colnames(prices) <<- pair$symbol
#     }else{
#       prices[pair$symbol] <<- pair$standardized_close()
#     }
#
#   }
#   seconds_left = (60-second(lubridate::now("UTC")))
#   later::later(minutely, seconds_left)
# }
minutely = function(){
for(pair in pair_list){
#Request tick history with count 1
req = paste(paste(paste(paste('{
"ticks_history": "', pair$symbol, sep=""), '",
"adjust_start_time": 1,
"count": ', sep=""), 1, sep=""), ',
"end": "latest",
"start": 5000,
"style": "candles",
"granularity": 60
}', sep="")
req = str_replace_all(req, "[\r\n\t]", "")
req = str_replace_all(req, " ", "")
ws$send(req)
pair$hreq = TRUE
if(ncol(prices) == 0){
prices <<- data.frame(pair$standardized_close())
colnames(prices) <<- pair$symbol
}else{
prices[pair$symbol] <<- pair$standardized_close()
}
}
minutely_task(prices)
seconds_left = (60-second(lubridate::now("UTC"))) * 1000
tclTaskChange(id="minutely", wait=seconds_left, redo = T)
scs <<- seconds_left
if(!is.null(fnc)){
fnc()
}
#ws$send('{"ping":1}')
}
tick = function(symbol, data){
tmp = data.table::copy(data)
tmp["close"] = (tmp["ask"] + tmp["bid"]) / 2
# `$`(pair_list, symbol)
i_dt = NULL
tryCatch({
i_dt = data.table::copy(pair_list[[symbol]]$data)
})
if(!is.null(pair_list[[symbol]]) && !is.null(i_dt)){
tmp = tmp[,c("close", "epoch", "high", "low", "open")]
i_dt[datasz+1,] = tmp
pair_list[[symbol]]$set_data(i_dt)
}
}
ohlc = function(symbol, data){
tmp = data.table::copy(data)
i_dt = NULL
tryCatch({
i_dt = data.table::copy(pair_list[[symbol]]$data)
})
if(!is.null(pair_list[[symbol]]) && !is.null(i_dt)){
tryCatch({
tmp = tmp[,c("close", "epoch", "high", "low", "open")]
#rownames(tmp) = c(datasz+1)
i_dt[datasz+1,] = tmp
pair_list[[symbol]]$set_data(i_dt)
}, warning = function(war) {
err <<- paste (err, war, sep = "\nLine 277-9\n", collapse = NULL)
}, error = function(err0) {
err <<- paste (err, err0, sep = "\nLine 277-9\n", collapse = NULL)
})
}
}
tick_history = function(symbol, data){
tmp = data.table::copy(data)
i_dt = NULL
tryCatch({
i_dt = data.table::copy(pair_list[[symbol]]$data)
})
if(!is.null(pair_list[[symbol]]) && !is.null(i_dt)){
tryCatch({
if(datasz != nrow(i_dt)-1){
datasz <<- nrow(i_dt)-1
}
tmp = tmp[,c("close", "epoch", "high", "low", "open")]
i_dt[datasz+1,] = tmp[nrow(tmp),]
pair_list[[symbol]]$set_data(i_dt)
pair_list[[symbol]]$hreq <<- FALSE
}, warning = function(war) {
err <<- paste (err, war, sep = "\nLine 301-3\n", collapse = NULL)
}, error = function(err0) {
err <<- paste (err, err0, sep = "\nLine 301-3\n", collapse = NULL)
})
}else{
tryCatch({
tmp = tmp[,c("close", "epoch", "high", "low", "open")]
ltmp = tmp[datasz,]
rownames(ltmp) = datasz+1
tmp = rbind(tmp, ltmp)
pair_list[[symbol]] <<- Pair$new(symbol = symbol, data = tmp, hreq = FALSE)
}, warning = function(war) {
err <<- paste (err, war, sep = "\nLine 314-6\n", collapse = NULL)
}, error = function(err0) {
err <<- paste (err, err0, sep = "\nLine 314-6\n", collapse = NULL)
})
}
seconds_left = (60-second(lubridate::now("UTC"))) * 1000
tclTaskSchedule(seconds_left, minutely(), id="minutely", redo = T)
# minutely()
}
ws$onOpen(
function(event){
cat("Connected")
for (name in volatility_pairs) {
req = paste(paste(paste(paste('{
"ticks_history": "', name, sep=""), '",
"adjust_start_time": 1,
"count": ', sep=""), datasz, sep=""), ',
"end": "latest",
"start": 5000,
"style": "candles",
"granularity": 60,
"subscribe": 1
}', sep="")
# req = paste(paste(paste(paste('{
#   "ticks_history": "', name, sep=""), '",
#   "adjust_start_time": 1,
#   "count": ', sep=""), datasz, sep=""), ',
#   "end": "latest",
#   "start": 5000,
#   "style": "candles",
#   "granularity": 60
# }', sep="")
req = str_replace_all(req, "[\r\n\t]", "")
req = str_replace_all(req, " ", "")
ws$send(req)
}
#ws$send('{"ticks":"R_100"}')
})
ws$onMessage(
function(event) {
msg <<- event$data
msg <<- jsonlite::fromJSON(msg)
if("error" %in% msg){
print(msg)
}else{
message_type = msg$msg_type
tryCatch({
if(message_type == "authorize"){
}else if(message_type == "candles"){
tick_history(msg$echo_req$ticks_history, data.frame(msg$candles))
}else if(message_type == "forget_all"){
}else if(message_type == "ohlc"){
ohlc(msg$ohlc$symbol, data.frame(msg$ohlc))
}else if(message_type == "tick"){
tick(msg$tick$symbol, data.frame(msg$tick))
}
}, warning = function(war) {
err <<- paste (err, war, sep = "\n", collapse = NULL)
# traceback(1, max.lines = 1)
}, error = function(err0) {
err <<- paste (err, err0, sep = "\n", collapse = NULL)
# traceback(1, max.lines = 1)
}, finally = {
})
}
# cat(dt, "\n")
})
subscribe = function(){
ws$connect()
}
login = function(api_token){
api_token = "1aStI5HCcty55Ly"
req = paste(paste('{"authorize": "', api_token, sep=""), '"}', sep="")
req = str_replace_all(req, "[\r\n\t]", "")
req = str_replace_all(req, " ", "")
ws$send(req)
}
logout = function(){
ws$send('{"logout":1}')
}
unsubscribe = function(){
tryCatch({
tclTaskDelete("minutely")
})
tryCatch({
ws$send('{"forget_all":"candles"}')
})
tryCatch({
ws$send('{"forget_all":"ticks"}')
})
tryCatch({
rm(list=ls())
})
}
close_all = function(){
logout()
unsubscribe()
ws$close()
}
buy = function(){
stake = 1
contract_type = "PUT"
duration = 1
duration_unit = "m"
symbol = "frxAUDJPY"
req = paste(paste(paste(paste(paste(paste(paste('{
"buy": "1","
"price": "', stake, sep=""), '",
"parameters":
{
"amount": "', stake, sep=""), '",
"basis": "stake",
"contract_type": "', contract_type, sep=""), '",
"currency": "USD",
"duration": "',  duration, sep=""), '",
"duration_unit": "', duration_unit, sep=""), '",
"symbol": "', symbol, sep=""),  '"
},
"subscribe": "1"
}', sep="")
req = str_replace_all(req, "[\r\n\t]", "")
req = str_replace_all(req, " ", "")
ws$send(req)
}
assign_function = function(in_0){
fnc <<- in_0
}
getpwiseplot <- function(in_1){
if(is.null(in_1) || is.na(in_1)){
pairwiseplot <<- NULL
}else{
symbols = unique(strsplit(in_1, "-")[[1]])
pairwiseplot <<- plot_ly(prices, x = as.numeric(rownames(prices)),
y= as.formula(paste0("~`", symbols[1], "`")),
type='scatter', mode='lines',
name = str_replace_all(symbols[1], "frx", ""))
pairwiseplot <<- pairwiseplot %>% plotly::add_trace(prices, x= as.numeric(rownames(prices)),
y= as.formula(paste0("~`", symbols[2], "`")),
type='scatter', mode='line',
name = str_replace_all(symbols[2], "frx", ""))
}
return(pairwiseplot)
}
getspreadplot <- function(in_2){
if(is.null(in_2) || is.na(in_2)){
spreadplot <<- NULL
}else{
pdt = tradable_list[[in_2]][[".->data"]]
spreadplot <<- plot_ly(pdt, x = as.numeric(rownames(pdt)), y = ~res,
type='scatter', mode='lines', name="Residuals/Spread")
}
return(spreadplot)
}
getSRatioplot <- function(in_3){
if(is.null(in_3) || is.na(in_3)){
standardRatioPlot <<- NULL
}else{
pdt = tradable_list[[in_3]][[".->data"]]
standardRatioPlot <<- plot_ly(pdt, x = as.numeric(rownames(pdt)), y = ~standard_ratio,
type='scatter', mode='lines', name="Standard Ratio")
standardRatioPlot <<- standardRatioPlot %>% plotly::add_trace(pdt, x= as.numeric(rownames(pdt)),
y = ~zub,
type='scatter', mode='line',
name = "Ceiling")
standardRatioPlot <<- standardRatioPlot %>% plotly::add_trace(pdt, x= as.numeric(rownames(pdt)),
y = ~zlb,
type='scatter', mode='line',
name = "Floor")
}
return(standardRatioPlot)
}
# for(rw in rownames(test)){
#   test$c[as.numeric(rw)] <-
#     if(test$a[as.numeric(rw)] == test$b[as.numeric(rw)]) "buy" else "sell"
# }
subscribe()
unsubscribe()
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
as.numeric("hj")
as.numeric("-1")
runApp('OatFX')
runApp('OatFX')
library(rsconnect)
deployApp('OatFX')
runApp('~/Github/OatFX/OatFX')
library(rsconnect)
deployApp('OatFX')
runApp('OatFX')
library(shiny)
library(plotly)
library(here)
# source(here::here('OatFX/rscript','SharedObjects.R'))
source('OatFX/rscripSharedObjects.R')
# source(here::here('OatFX/rscript','SharedObjects.R'))
source('OatFX/rscript/SharedObjects.R')
source("OatFX/rscript/model.R")
library(websocket)
library(lubridate)
library(jsonlite)
library(tseries)
library(stringr)
library(here)
library(tseries)
library(reshape2)
library(ggplot2)
library(plotly)
library(RColorBrewer)
library(rqdatatable)
library(tcltk2)
library(later)
source("OatFX/rscript/model.R")
runApp('OatFX')
source("model.R")
source("rscript/model.R")
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
pairs_menu_item2 <- fluidRow(
box(
box(
),
box(
textInput("stake1", "Stake1:")
),
box(
textInput("duration1", "Duration1:")
),
box(
selectInput("duration_unit1", "Duration Unit 1",
c("Minutes" = "m", "Hours" = "h", "Days" = "d") )
),
box(
actionButton("purchase1", "Purchase 1")
)
),
# box(
#     box(
#         textOutput("sym2")
#     ),
#     box(
#         textInput("stake2", "Stake2:")
#     ),
#     box(
#         textInput("duration2", "Duration2:")
#     ),
#     box(
#         selectInput("duration_unit2", "Duration Unit 2",
#                     c("Minutes" = "m", "Hours" = "h", "Days" = "d") )
#     ),
#     box(
#         actionButton("purchase2", "Purchase 2")
#     )
# )
)
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
length("a")
length("")
"" == ""
"      " == ""
length("ca")
stringi::stri_isempty("")
stringi::stri_isempty("      ")
unsubscribe = function(){
tryCatch({
tclTaskDelete("minutely")
})
tryCatch({
ws$send('{"forget_all":"candles"}')
})
tryCatch({
ws$send('{"forget_all":"ticks"}')
})
tryCatch({
rm(list=ls())
})
}
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
if(!is.null(tradable_list[[id]])){
tradable_list[[id]] <- NULL
}
}
shiny::runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
pairings[ttle] <<- id
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
login()
login = function(api_token = "1aStI5HCcty55Ly"){
req = paste(paste('{"authorize": "', api_token, sep=""), '"}', sep="")
req = str_replace_all(req, "[\r\n\t]", "")
req = str_replace_all(req, " ", "")
ws$send(req)
}
login()
ws = WebSocket$new("wss://ws.binaryws.com/websockets/v3?app_id=15805", autoConnect = FALSE)
ws$onMessage(
function(event) {
msg <<- event$data
msg <<- jsonlite::fromJSON(msg)
if("error" %in% msg){
err=msg
}else{
message_type = msg$msg_type
tryCatch({
if(message_type == "authorize"){
}else if(message_type == "candles"){
tick_history(msg$echo_req$ticks_history, data.frame(msg$candles))
}else if(message_type == "forget_all"){
}else if(message_type == "ohlc"){
ohlc(msg$ohlc$symbol, data.frame(msg$ohlc))
}else if(message_type == "tick"){
tick(msg$tick$symbol, data.frame(msg$tick))
}
}, warning = function(war) {
err <<- paste (err, war, sep = "\n", collapse = NULL)
# traceback(1, max.lines = 1)
}, error = function(err0) {
err <<- paste (err, err0, sep = "\n", collapse = NULL)
# traceback(1, max.lines = 1)
}, finally = {
})
}
# cat(dt, "\n")
})
ws$onOpen(
function(event){
cat("Connected")
for (name in forex_major_pairs) {
req = paste(paste(paste(paste('{
"ticks_history": "', name, sep=""), '",
"adjust_start_time": 1,
"count": ', sep=""), datasz, sep=""), ',
"end": "latest",
"start": 1,
"style": "candles",
"granularity": 60,
"subscribe": 1
}', sep="")
# req = paste(paste(paste(paste('{
#   "ticks_history": "', name, sep=""), '",
#   "adjust_start_time": 1,
#   "count": ', sep=""), datasz, sep=""), ',
#   "end": "latest",
#   "start": 5000,
#   "style": "candles",
#   "granularity": 60
# }', sep="")
req = str_replace_all(req, "[\r\n\t]", "")
req = str_replace_all(req, " ", "")
ws$send(req)
}
#ws$send('{"ticks":"R_100"}')
})
login()
login = function(api_token = "1aStI5HCcty55Ly"){
req = paste(paste('{"authorize": "', api_token, sep=""), '"}', sep="")
req = str_replace_all(req, "[\r\n\t]", "")
req = str_replace_all(req, " ", "")
print(req)
ws$send(req)
}
login()
login()
login("ABC")
ws$connect()
login()
unsubscribe()
runApp('OatFX')
?WebSocket
??WebSocket
library(websocket)
?WebSocket
shiny::runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
