#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(plotly)
library(here)
source(here::here('OatFX/rscript','SharedObjects.R'))

# Define server logic required to draw a histogram
shinyServer(function(input, output, session) {
        
    r_activ_objs <- reactiveValues(sc = scs)
    
    observe({
        click("refresh")
    })
    
    observeEvent(input$subscribe, {
        subscribe()
    })
    
    observeEvent(input$unsubscribe, {
        unsubscribe()
    })
    
    observeEvent(input$logout, {
        logout()
    })
    
    observeEvent(input$refresh, {
        output$corPlot <- renderPlotly({NULL})
        output$cointPlot <- renderPlotly({NULL})
        output$corPlot <- renderPlotly({corhm})
        output$cointPlot <- renderPlotly({cointhm})
    })
    
    output$corPlot <- renderPlotly({corhm})
    
    output$cointPlot <- renderPlotly({cointhm})
    
    refreshplot <- function(){
        output$corPlot <- renderPlotly({NULL})
        output$cointPlot <- renderPlotly({NULL})
        output$corPlot <- renderPlotly({corhm})
        output$cointPlot <- renderPlotly({cointhm})
    }
    
    assign_function(refreshplot)
    
    # observe({
    #     #print("render")
    #     r_activ_objs$cor_p <- corhm
    #     r_activ_objs$coint_p <- cointhm
    #     output$corPlot <- renderPlot(r_activ_objs$cor_p)
    #     output$cointPlot <- renderPlot(r_activ_objs$coint_p)
    # })
    
    # observe({
    #     click("btn")
    #     invalidateLater(3000)
    # })

})
