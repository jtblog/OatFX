#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)
library(shinyjs)
library(here)
# source("OatFX/rscript/SharedObjects.R")
source(here::here('OatFX/rscript','SharedObjects.R'))

# Define server logic required to draw a histogram
shinyServer(function(input, output, session) {
    # NS <- session$ns
    # output$distPlot <- renderPlot({
    # 
    #     # generate bins based on input$bins from ui.R
    #     x    <- faithful[, 2]
    #     bins <- seq(min(x), max(x), length.out = input$bins + 1)
    # 
    #     # draw the histogram with the specified number of bins
    #     hist(x, breaks = bins, col = 'darkgray', border = 'white')
    # 
    # })
    
    observeEvent(input$show, {
        # showNotification("This is a notification.")
        # shinyjs::hide('show')
        # showNotification("This is a notification.")
        cat("Showing")
        print("Showing")
    })
    
    observeEvent(input$login, {
        close_all()
    })
    
    # df <- eventReactive(input$show, {
    #     cat("Showing")
    # })
    
    # observe({
    #     if(input$show == TRUE){
    #         showNotification("This is a notification.")
    #         cat("Showing")
    #         print("Showing")
    #     }
    # })

})
