library(websocket)
library(lubridate)
library(jsonlite)
library(tseries)
library(stringr)
library(here)
# source("~/Github/OatFX/OatFX/rscript/model.R")
source(here::here('OatFX/rscript','model.R'))

msg = NULL 
datasz = 1000
pair_list = list()
prices = data.frame(row.names = c(1:datasz+1))

ws <- WebSocket$new("wss://ws.binaryws.com/websockets/v3?app_id=15805", autoConnect = FALSE)

# forex_major_pairs <- c("frxAUDJPY", "frxAUDUSD", 
#                        "frxEURAUD", "frxEURCAD", "frxEURCHF", 
#                        "frxEURGBP", "frxEURJPY", "frxEURUSD", 
#                        'frxGBPAUD', "frxGBPJPY", "frxGBPUSD", 
#                        "frxUSDCAD", "frxUSDCHF", "frxUSDJPY")
forex_major_pairs <- c("frxAUDJPY", "frxAUDUSD")

volatility_pairs <- c("R_10", "R_25", 
                       "R_50", "R_75", "R_100")

tick <- function(symbol, data){
  data["close"] = (data["ask"] + data["bid"]) / 2
  # `$`(pair_list, symbol)
  if(is.null(pair_list[[symbol]])){
    
  }else{
    i_dt = pair_list[[symbol]]$data
    time0 = lubridate::as_datetime(i_dt$epoch[datasz])
    time1 <- lubridate::as_datetime(data$epoch[length(data$epoch)])
    mins_diff = abs(as.numeric(difftime(time0, time1, unit="mins")))
    if(mins_diff >= 1){
      data["open"] = i_dt$close[datasz]
      data[,c("high", "low")] = data["close"]
      data = data[,c("close", "epoch", "high", "low", "open")]
      i_dt[datasz+1,] <- data
      if(pair_list[[symbol]]$hreq == FALSE){
        #Request tick history with count 1
        req <- paste(paste(paste(paste('{
          "ticks_history": "', symbol, sep=""), '",
          "adjust_start_time": 1,
          "count": ', sep=""), 1, sep=""), ',
          "end": "latest",
          "start": 5000,
          "style": "candles",
          "granularity": 60
        }', sep="")
        req <- str_replace_all(req, "[\r\n\t]", "")
        req <- str_replace_all(req, " ", "")
        ws$send(req)
        pair_list[[symbol]]$hreq <- TRUE
      }
      
      if(nrow(i_dt) == nrow(prices)){
        prices[symbol] = pair_list[[symbol]]$standardized_close
      }
    }else{
      data["open"] = i_dt$close[datasz]
      data[,"high"] = max(data["close"], i_dt$high[datasz+1])
      data[,"low"] = min(data["close"], i_dt$low[datasz+1])
      data = data[,c("close", "epoch", "high", "low", "open")]
      i_dt[datasz+1,] <- data
    }
  }
  
}

ohlc <- function(symbol, data){
  if(is.null(pair_list[[symbol]])){
    
  }else{
    i_dt = pair_list[[symbol]]$data
    time0 = lubridate::as_datetime(i_dt$epoch[datasz])
    time1 <- lubridate::as_datetime(data$epoch[length(data$epoch)])
    mins_diff = abs(as.numeric(difftime(time0, time1, unit="mins")))
    if(mins_diff >= 1){
      data = data[,c("close", "epoch", "high", "low", "open")]
      i_dt[datasz+1,] <<- data
      if(pair_list[[symbol]]$hreq == FALSE){
        #Request tick history with count 1
        req <- paste(paste(paste(paste('{
          "ticks_history": "', symbol, sep=""), '",
          "adjust_start_time": 1,
          "count": ', sep=""), 1, sep=""), ',
          "end": "latest",
          "start": 5000,
          "style": "candles",
          "granularity": 60
        }', sep="")
        req <- str_replace_all(req, "[\r\n\t]", "")
        req <- str_replace_all(req, " ", "")
        ws$send(req)
        pair_list[[symbol]]$hreq <<- TRUE
      }
      
      if(nrow(i_dt) == nrow(prices)){
        prices[,symbol] <<- pair_list[[symbol]]$standardized_close
      }
    }else{
      data <<- data[,c("close", "epoch", "high", "low", "open")]
      i_dt[datasz+1,] <<- data
    }
  }
}

tick_history <- function(symbol, data){
  if( nrow(data) > 1 ){
    if(is.null(pair_list[[symbol]])){
      data[datasz+1,] <<- data[datasz,]
      pair_list[[symbol]] <<- Pair$new(symbol = symbol, data = data, hreq = FALSE)
    }else{
      data[datasz+1,] <<- data[datasz,]
      pair_list[[symbol]]$data <<- data
    }
  }else{
    # Number of rows is 1
    if(is.null(pair_list[[symbol]])){
      
    }else{
      pair_list[[symbol]]$data[datasz,] <<- data
    }
    pair_list[[symbol]]$hreq <- FALSE
  }
}

ws$onOpen(
  function(event){
    cat("Connected")
    for (name in volatility_pairs) {
      # req <- paste(paste(paste(paste('{
      #   "ticks_history": "', name, sep=""), '",
      #   "adjust_start_time": 1,
      #   "count": ', sep=""), datasz, sep=""), ',
      #   "end": "latest",
      #   "start": 5000,
      #   "style": "candles",
      #   "granularity": 60,
      #   "subscribe": 1
      # }', sep="")
      req <- paste(paste(paste(paste('{
        "ticks_history": "', name, sep=""), '",
        "adjust_start_time": 1,
        "count": ', sep=""), datasz, sep=""), ',
        "end": "latest",
        "start": 5000,
        "style": "candles",
        "granularity": 60
      }', sep="")
      req <- str_replace_all(req, "[\r\n\t]", "")
      req <- str_replace_all(req, " ", "")
      ws$send(req)
    }
    #ws$send('{"ticks":"R_100"}')
  })

ws$onMessage(
  function(event) {
    msg <<- event$data
    msg <<- jsonlite::fromJSON(msg) 
    if("error" %in% msg){
      print(msg)
    }else{
      message_type = msg$msg_type
      if(message_type == "authorize"){
        
      }else if(message_type == "candles"){
        tick_history(msg$echo_req$ticks_history, data.frame(msg$candles))
      }else if(message_type == "forget_all"){
        
      }else if(message_type == "ohlc"){
        ohlc(msg$ohlc$symbol, data.frame(msg$ohlc))
      }else if(message_type == "tick"){
        tick(msg$tick$symbol, data.frame(msg$tick))
      }

    }
    # cat(dt, "\n")
  })

connect <- function(){
  ws$connect()
}

login <- function(api_token){
  api_token = "1aStI5HCcty55Ly"
  req <- paste(paste('{"authorize": "', api_token, sep=""), '"}', sep="")
  req <- str_replace_all(req, "[\r\n\t]", "")
  req <- str_replace_all(req, " ", "")
  ws$send(req)
}

logout <- function(){
  ws$send('{"logout":1}')
}

unsubscribe <- function(){
  ws$send('{"forget_all":"ticks"}')
  ws$send('{"forget_all":"candles"}')
  # ws$send("{\"forget_all\":\"ticks\"}")
}

close_all <- function(){
  logout()
  unsubscribe()
  ws$close()
}

buy <- function(){
  stake = 1
  contract_type = "PUT"
  duration = 1
  duration_unit = "m"
  symbol = "frxAUDJPY"
  req <- paste(paste(paste(paste(paste(paste(paste('{
    "buy": "1","
    "price": "', stake, sep=""), '",
    "parameters": 
        { 
          "amount": "', stake, sep=""), '",
          "basis": "stake",
          "contract_type": "', contract_type, sep=""), '",
          "currency": "USD",
          "duration": "',  duration, sep=""), '",
          "duration_unit": "', duration_unit, sep=""), '",
          "symbol": "', symbol, sep=""),  '" 
        },
    "subscribe": "1"
    }', sep="")
  req <- str_replace_all(req, "[\r\n\t]", "")
  req <- str_replace_all(req, " ", "")
  ws$send(req)
}


