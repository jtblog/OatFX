)
#print(result)
# cat(dt, "\n")
}
)
res0$msg_type
res1 <- '{
"echo_req": {
"subscribe": 1,
"ticks": "R_50"
},
"msg_type": "tick",
"subscription": {
"id": "d949b0c2-2445-e1f3-eba9-44dffc13a0da"
},
"tick": {
"ask": 132.2574,
"bid": 132.2374,
"epoch": 1616262478,
"id": "d949b0c2-2445-e1f3-eba9-44dffc13a0da",
"pip_size": 4,
"quote": 132.2474,
"symbol": "R_50"
}
}'
res1 <<- jsonlite::fromJSON(res1)
res1
res1$tick$ask
data.frame(res1$tick)
res1
res0
res0$echo_req$ticks_history
res0
"candles" %in% res0
"candlesv" %in% res0
redt <- data.frame(res0$candles)
redt
redt$close
redt[-nrow(redt),]
transform(redt[-nrow(redt),], NewCol = redt[1,1,1,1,1])
redt[1,1]
nrow(redt)
redt[1,]
redt
redt0 = data.frame(res1$tick)
redt0
redt0["ask"]
redt0["close"] = redt0["ask"] * redt0["bid"] / 2
redt0
redt0["close"] = (redt0["ask"] + redt0["bid"]) / 2
redt0
redt
redt[,-"pip_size"]
redt[,"close, epoch"]
redt[,["close","epoch"]]
redt[,("close","epoch")]
redt[,c("close","epoch")]
redt0
redt0[,c("high", "low", "open")] = 0
redt0
redt
redt0 = redt0[,c("close", "epoch", "high", "low", "open")]
redt0
redt[-nrow(redt),]
redt[nrow(redt),]
redt[nrow(redt),] = redt0
redt
redt[nrow(redt)+1,] = redt0
redt
list("first" = 1, "second" = 2)
v = list("first" = 1, "second" = 2)
v["first"]
v["first"] * 2
v["first"][1]
v$first + 2
"first"%in% v
"first" %in% v
'first' %in% v
is.null(v$first)
Account <- setRefClass("Account",
fields = list(balance = "numeric"),
methods = list(
withdraw = function(x) {
# balance <<- balance - x
},
deposit = function(x) {
# balance <<- balance + x
}
)
)
list('key', Account$new(balance = 1000) )
v = list('key'=Account$new(balance = 1000) )
"key" in v
"key" %in% v
v$key == NULL
is.null(v$key)
is.null(v["key"])
is.null(v["x"])
is.null(v$j)
v["c"]
is.na(v["x"])
is.null(v["x"])
v = list('key0'=Account$new(balance = 1000), 'key1'=Account$new(balance = 2000))
v
v[v$key0$balance == 1000 ]#| l %% 5 == 0]
v = list(Account$new(balance = 1000), Account$new(balance = 2000))
v[v$balance == 1000]
v[v$balance == 1000][1]
v = list('key0'=Account$new(balance = 1000), 'key1'=Account$new(balance = 2000))
names(v)
v["key0"]
v[v == "key0"]
v[v == "key0"][1]
`$`(v, "key0")
`$`(v, "key0")$balance
data.frame(close = 0, epoch = 0, high = 0, low = 0, open = 0)
source(model.R)
source("model.R")
source("rscript/model.R")
source("rscript/model.R")
v = list('key0'=Account$new(balance = 1000), 'key1'=Account$new(balance = 2000))
source("rscript/model.R")
v = list('key0'=Account$new(balance = 1000), 'key1'=Account$new(balance = 2000))
`$`(v, "key0")
is.null(`$`(v, "key0"))
is.na(`$`(v, "key0"))
is.null(`$`(v, "key"))
!is.null(`$`(v, "key"))
(!is.null(`$`(v, "key")))
install.packages("tseries")
install.packages("tseries")
# Tick history response
# Response
res0 = '{
"candles": [
{
"close": 132.1521,
"epoch": 1616261460,
"high": 132.2527,
"low": 132.1521,
"open": 132.1856
},
{
"close": 132.1076,
"epoch": 1616261520,
"high": 132.2089,
"low": 132.0826,
"open": 132.177
},
{
"close": 132.0855,
"epoch": 1616261580,
"high": 132.1781,
"low": 132.0681,
"open": 132.0974
},
{
"close": 132.0876,
"epoch": 1616261640,
"high": 132.0894,
"low": 131.9912,
"open": 132.0864
},
{
"close": 132.0909,
"epoch": 1616261700,
"high": 132.1589,
"low": 132.0825,
"open": 132.1052
}
],
"echo_req": {
"adjust_start_time": 1,
"count": 5,
"end": "latest",
"granularity": 60,
"start": 5000,
"style": "candles",
"ticks_history": "R_50"
},
"msg_type": "candles",
"pip_size": 4
}'
# Tick history response
# Response
res0 = '{
"candles": [
{
"close": 132.1521,
"epoch": 1616261460,
"high": 132.2527,
"low": 132.1521,
"open": 132.1856
},
{
"close": 132.1076,
"epoch": 1616261520,
"high": 132.2089,
"low": 132.0826,
"open": 132.177
},
{
"close": 132.0855,
"epoch": 1616261580,
"high": 132.1781,
"low": 132.0681,
"open": 132.0974
},
{
"close": 132.0876,
"epoch": 1616261640,
"high": 132.0894,
"low": 131.9912,
"open": 132.0864
},
{
"close": 132.0909,
"epoch": 1616261700,
"high": 132.1589,
"low": 132.0825,
"open": 132.1052
}
],
"echo_req": {
"adjust_start_time": 1,
"count": 5,
"end": "latest",
"granularity": 60,
"start": 5000,
"style": "candles",
"ticks_history": "R_50"
},
"msg_type": "candles",
"pip_size": 4
}'
res0
res0 = jsonlite::fromJSON(res0)
jsonlite::minify(res0)
jsonlite::toJSON(res0)
dt = data.frame(res0)
dt.cor
dt.corr
dt
dt = data.frame(res0$candles)
dt
dt.corr
cor(dt)
typeof(cor(dt))
typeof(data.frame(cor(dt)))
typeof(data.frame())
typeof(dt)
class(dt)
max(dt)
coint <- function(vars) {
d<-as.matrix(vars) #convert data frame to Matrix
n<-length(colnames(vars)) #calculate the total number of variables
m<-combn(n,2) #calculate all possible combinations of pairs for all variables
col_m<-dim(m)[2] #number of all possible combinations
result<-matrix(NA,nrow=col_m,ncol=3) #empty result matrix
colnames(result)<-c("Var_1","Var_2","p_Value")
for (i in 1:col_m){
Var_1<-m[1,i]
Var_2<-m[2,i]
res <- lm(d[,Var_1] ~ d[,Var_2] + 0)$residuals
p<-tseries::adf.test(res, alternative = "stationary", k = 0)$p.value
result[i,1]<-colnames(vars)[Var_1]
result[i,2]<-colnames(vars)[Var_2]
result[i,3]<-p
}
return(result)
}
library(tseries)
coint <- function(vars) {
d<-as.matrix(vars) #convert data frame to Matrix
n<-length(colnames(vars)) #calculate the total number of variables
m<-combn(n,2) #calculate all possible combinations of pairs for all variables
col_m<-dim(m)[2] #number of all possible combinations
result<-matrix(NA,nrow=col_m,ncol=3) #empty result matrix
colnames(result)<-c("Var_1","Var_2","p_Value")
for (i in 1:col_m){
Var_1<-m[1,i]
Var_2<-m[2,i]
res <- lm(d[,Var_1] ~ d[,Var_2] + 0)$residuals
p<-tseries::adf.test(res, alternative = "stationary", k = 0)$p.value
result[i,1]<-colnames(vars)[Var_1]
result[i,2]<-colnames(vars)[Var_2]
result[i,3]<-p
}
return(result)
}
coint(dt)
dt
dt$epoch[length(dt$epoch)]
lubridate::as_datetime(dt$epoch[length(dt$epoch)])
lubridate::as_datetime(dt$epoch[length(dt$epoch)]) - lubridate::as_datetime(dt$epoch[length(dt$epoch)-1])
lubridate::now("UTC") - lubridate::as_datetime(dt$epoch[length(dt$epoch)-1])
as.numeric(lubridate::now("UTC") - lubridate::as_datetime(1616261640))
lubridate::now("UTC") - lubridate::as_datetime(dt$epoch[length(dt$epoch)-1])
as.numeric(lubridate::now("UTC") - lubridate::as_datetime(dt$epoch[length(dt$epoch)-1]))
lubridate::now("UTC") - lubridate::as_datetime(dt$epoch[length(dt$epoch)-1])$days
lubridate::now("UTC") - lubridate::as_datetime(dt$epoch[length(dt$epoch)-1]) %>% as.numeric('years')
lubridate::now("UTC") - lubridate::as_datetime(dt$epoch[length(dt$epoch)-1]) %>% as.numeric('years')
lubridate::now("UTC") - lubridate::as_datetime(dt$epoch[length(dt$epoch)-1])$days
lubridate::now("UTC") - lubridate::as_datetime(dt$epoch[length(dt$epoch)-1])
lubridate::now("UTC") - lubridate::as_datetime(dt$epoch[length(dt$epoch)-1]) %>% as.numeric('years')
difftime(lubridate::now("UTC"), lubridate::as_datetime(dt$epoch[length(dt$epoch)-1]))
lubridate::now("UTC") - lubridate::as_datetime(dt$epoch[length(dt$epoch)-1])
difftime(lubridate::now("UTC"), lubridate::as_datetime(dt$epoch[length(dt$epoch)-1]), unit="mins")
difftime(lubridate::as_datetime(dt$epoch[length(dt$epoch)-1]), lubridate::now("UTC"), unit="mins")
abs(-1)
as.numeric(difftime(lubridate::as_datetime(dt$epoch[length(dt$epoch)-1]), lubridate::now("UTC"), unit="mins"))
max(1, 2)
for(x %in% list("g", "o")){}
for(x in list("g", "o")){print(x)}
lubridate::as_datetime(1616429520)
lubridate::as_datetime(1616429460)
lubridate::as_datetime(1616429460)
lubridate::as_datetime(1616429962)
lubridate::as_datetime(1616430000)
""PUT""
paste("\", "TEST")
paste("", "TEST")
paste('', "TEST")
paste("", "TEST")
paste("", "\"TEST\"")
"authorize": "' + api_token + '"
api_token = "1aStI5HCcty55Ly"
"authorize": "' + api_token + '"
api_token = "1aStI5HCcty55Ly"
req = paste(paste('{
"authorize": "', api_token), '"}')
req
req = paste(paste('{"authorize": "', api_token), '"}')
req
api_token = "1aStI5HCcty55Ly"
req = paste(paste('{"authorize": "', api_token, sep=""), '"}', sep="")
req
symbol = "frxAUDJPY"
req = paste(paste(paste(paste('{
"ticks_history": "', symbol, sep=""), '",
"adjust_start_time": 1,
"count": ', sep=""), 1, sep=""), ',
"end": "latest",
"start": 5000,
"style": "candles",
"granularity": 60,
"subscribe": 1
}', sep="")
req
library(stringr)
str_replace_all(req, "[\r\n]", "")
str_replace_all(req, "[\r\n\t]", "")
str_replace_all(req, "[\r\n\t]", "")
str_replace_all(req, " ", "")
\
req <<- str_replace_all(req, "[\r\n\t]", "")
req <<- str_replace_all(req, " ", "")
req
stake = 1
contract_type = "PUT"
duration = 1
duration_unit = "m"
symbol = "frxAUDJPY"
req = paste(paste(paste(paste(paste(paste(paste('{
"buy": "1","
"price": "', stake, sep=""), '",
"parameters":
{
"amount": "', stake, sep=""), '",
"basis": "stake",
"contract_type": "', contract_type, sep=""), '",
"currency": "USD",
"duration": "',  duration, sep=""), '",
"duration_unit": "', duration_unit, sep=""), '",
"symbol": "', symbol, sep=""),  '"
},
"subscribe": "1"
}', sep="")
req <<- str_replace_all(req, "[\r\n\t]", "")
req <<- str_replace_all(req, " ", "")
req
dt
dt$close
mean(dt$close)
sd(dt$close)
(dt$close - mean(dt$close) ) / sd(dt$close)
dt[,"standard"] = (dt$close - mean(dt$close)) / sd(dt$close)
dt
dt[,"standard"] = NULL
dt
p = data.frame()
p[,"standard"] = (dt$close - mean(dt$close)) / sd(dt$close)
p["standard"] = (dt$close - mean(dt$close)) / sd(dt$close)
?data.frame()
[1:1000]
(1:1000)
datasz = 1000
pairlist = list()
prices = data.frame(row.names = c(1:datasz))
prices
p
dt
p <<- data.frame(row.names = c(1:5))
p["standard"] = (dt$close - mean(dt$close)) / sd(dt$close)
p
p <<- data.frame(row.names = c(1:4))
p["standard"] = (dt$close - mean(dt$close)) / sd(dt$close)
cor(dt)
shiny::runApp('OatFX')
shiny::runApp('OatFX')
runApp()
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
shiny::runApp('OatFX')
names(tags)
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
names(tags)
tags$button
?tags$button
actionButton("do", "Click Me")
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
actionButton("do", "Click Me")
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
View(tick_history)
source("rscript/SharedObjects.R")
source("OatFX/rscript/SharedObjects.R")
source("OatFX/rscript/SharedObjects.R")
source("model.R")
rscript/
source("rscript/model.R")
source("'rscript/model.R")
source("/model.R")
source("/rscript/model.R")
source("~/OatFX/OatFX/rscript/model.R")
source("~/Github/OatFX/OatFX/rscript/model.R")
install.packages("here")
library(here)
# source("~/Github/OatFX/OatFX/rscript/model.R")
source(here::here('model.R'))
msg = NULL
# source("~/Github/OatFX/OatFX/rscript/model.R")
source(here::here('model.R'))
# source("~/Github/OatFX/OatFX/rscript/model.R")
source(here::here('OatFX/rscript','model.R'))
# source("OatFX/rscript/SharedObjects.R")
source(here::here('OatFX/rscript','SharedObjects.R'))
# source("OatFX/rscript/SharedObjects.R")
source(here::here('OatFX/rscript','SharedObjects.R'))
runApp('OatFX')
msg <<- event$data
runApp('OatFX')
ws$onOpen(
function(event){
cat("Connected")
for (name in forex_major_pairs) {
req = paste(paste(paste(paste('{
"ticks_history": "', name, sep=""), '",
"adjust_start_time": 1,
"count": ', sep=""), datasz, sep=""), ',
"end": "latest",
"start": 5000,
"style": "candles",
"granularity": 60,
"subscribe": 1
}', sep="")
req <<- str_replace_all(req, "[\r\n\t]", "")
req <<- str_replace_all(req, " ", "")
ws$send(req)
}
#ws$send('{"ticks":"R_100"}')
}
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
runApp('OatFX')
View(pairlist)
View(prices)
close()
close_all <- function(){
logout()
unsubscribe()
ws$close()
}
close_all()
close_all()
runApp('OatFX')
